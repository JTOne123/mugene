// Compile into jay as:
//	jay -ct < skeleton.cs mml_parser.jay > mml_parser.cs
%{
using System;
using System.Collections.Generic;
using System.IO;
using Commons.Music.Midi.Mml;

namespace Commons.Music.Midi.Mml.Parser
{
	public class MmlParserInput : yyParser.yyInput
	{
		IList<MmlToken> tokens;
		int idx = -1;

		public MmlParserInput (IList<MmlToken> tokens)
		{
			this.tokens = tokens;
		}
		
		public MmlLineInfo Location {
			get { return tokens.Count > 0 ? tokens [0].Location : null; }
		}
		
		public bool advance ()
		{
			if (++idx >= tokens.Count)
				return false;
			return true;
		}
		
		public object value ()
		{
			if (idx >= tokens.Count)
				return null;
			return (MmlToken) tokens [idx];
		}

		public int token ()
		{
			switch (tokens [idx].TokenType) {
			case MmlTokenType.Identifier:
				return Token.Identifier;
			case MmlTokenType.StringLiteral:
				return Token.StringLiteral;
			case MmlTokenType.NumberLiteral:
				return Token.NumberLiteral;
			case MmlTokenType.Period:
				return Token.Dot;
			case MmlTokenType.Comma:
				return Token.Comma;
			case MmlTokenType.Percent:
				return Token.Percent;
			case MmlTokenType.OpenCurly:
				return Token.OpenCurly;
			case MmlTokenType.CloseCurly:
				return Token.CloseCurly;
			case MmlTokenType.Question:
				return Token.Question;
			case MmlTokenType.Plus:
				return Token.Plus;
			case MmlTokenType.Minus:
				return Token.Minus;
			case MmlTokenType.Asterisk:
				return Token.Asterisk;
			case MmlTokenType.Slash:
				return Token.Slash;
			case MmlTokenType.Dollar:
				return Token.Dollar;
			case MmlTokenType.Colon:
				return Token.Colon;
			case MmlTokenType.Caret:
				return Token.Caret;
			case MmlTokenType.BackSlashLesser:
				return Token.BackSlashLesser;
			case MmlTokenType.BackSlashLesserEqual:
				return Token.BackSlashLesserEqual;
			case MmlTokenType.BackSlashGreater:
				return Token.BackSlashGreater;
			case MmlTokenType.BackSlashGreaterEqual:
				return Token.BackSlashGreaterEqual;
			case MmlTokenType.KeywordNumber:
				return Token.KeywordNumber;
			case MmlTokenType.KeywordLength:
				return Token.KeywordLength;
			case MmlTokenType.KeywordString:
				return Token.KeywordString;
			case MmlTokenType.KeywordBuffer:
				return Token.KeywordBuffer;
			}
			throw new Exception ("Internal error: unexpected MmlTokenType: " + tokens [idx].TokenType);
		}
	}

	public class MmlParser
	{
		static readonly MmlValueExpr skipped_argument = new MmlConstantExpr (null, MmlDataType.String, "DEFAULT ARGUMENT");
		MmlParserInput input;
		MmlLineInfo current_location;

		// 1: NOW at ...
		// 2+: jay output
		int yacc_verbose_flag;

		public MmlParser (IList<MmlToken> tokens)
		{
			try {
				yacc_verbose_flag = int.Parse (Environment.GetEnvironmentVariable ("MUGENE_MML_DEBUG"));
			} catch (Exception) {
			}
			if (yacc_verbose_flag > 1)
				debug = new yydebug.yyDebugSimple ();
			input = new MmlParserInput (tokens);
		}

        public List<MmlOperationUse> ParseOperations ()
        {
            var results = Parse ();
            var o = results as List<MmlOperationUse>;
            if (o == null) {
                Util.Report (MmlDiagnosticVerbosity.Error, input.Location, "operations are expected, but got an expression.");
                return new List<MmlOperationUse> ();
            }
            return o;
        }

        public MmlValueExpr ParseExpression ()
        {
            var o = Parse () as MmlValueExpr;
            if (o == null) {
                Util.Report (MmlDiagnosticVerbosity.Error, input.Location, "an expression is expected, but got operations.");
                return null;
            }
            return o;
        }
		
		object Parse ()
		{
			try {
				return yyparse (input);
			} catch (yyParser.yyException ex) {
				Util.Report (MmlDiagnosticVerbosity.Error, current_location, "MML parser error: {0}", ex);
                return null;
			}
		}

%}
%left Identifier
%left StringLiteral
%left NumberLiteral
%left Comma
%left OpenParen
%left CloseParen
%left OpenCurly
%left CloseCurly
%left Question
%left Caret
%left Plus
%left Minus
%left Asterisk
%left Slash
%left Percent
%left Dollar
%left Colon
%left Dot
%left BackSlashLesser
%left BackSlashLesserEqual
%left BackSlashGreater
%left BackSlashGreaterEqual
%left KeywordNumber
%left KeywordLength
%left KeywordString
%left KeywordBuffer

%start ExpressionOrOptOperationUses

%%

ExpressionOrOptOperationUses :
	/* empty */
	{
		$$ = new List<MmlOperationUse> ();
	}
	| OperationUses
	| Expression

OperationUses :
	OperationUse
	{
		var l = new List<MmlOperationUse> ();
		l.Add ((MmlOperationUse) $1);
		$$ = l;
	}
	| OperationUses OperationUse
	{
		var l = (List<MmlOperationUse>) $1;
		l.Add ((MmlOperationUse) $2);
		$$ = l;
	}

OperationUse :
	CanBeIdentifier
	{
		current_location = ((MmlToken) $1).Location;
	}
	ArgumentsOptCurly
	{
		var i = (MmlToken) $1;
		var o = new MmlOperationUse ((string) i.Value, i.Location);
		foreach (MmlValueExpr a in (IEnumerable<MmlValueExpr>) $3)
			o.Arguments.Add (a == skipped_argument ? null : a);
		$$ = o;
	}

ArgumentsOptCurly :
	OptArguments
	| OpenCurly OptArguments CloseCurly
	{
		$$ = $2;
	}

OptArguments :
	/* empty */
	{
		$$ = new List<MmlValueExpr> ();
	}
	| Arguments

Arguments :
	Argument
	{
		var l = new List<MmlValueExpr> ();
		l.Add ((MmlValueExpr) $1);
		$$ = l;
	}
	| OptArgument Comma Arguments
	{
		var a = (MmlValueExpr) $1;
		var l = (List<MmlValueExpr>) $3;
		l.Insert (0, a);
		$$ = l;
	}

OptArgument :
	/* empty */
	{
		$$ = skipped_argument;
	}
	| Argument

Argument :
	 Expression

Expression :
	ConditionalExpr

ConditionalExpr :
	ComparisonExpr
	| ComparisonExpr Question ConditionalExpr Comma ConditionalExpr
	{
		$$ = new MmlConditionalExpr ((MmlValueExpr) $1, (MmlValueExpr) $3, (MmlValueExpr) $5);
	}

ComparisonExpr :
	AddSubExpr
	| AddSubExpr ComparisonOperator ComparisonExpr
	{
		$$ = new MmlComparisonExpr ((MmlValueExpr) $1, (MmlValueExpr) $3, (ComparisonType) $2);
	}

ComparisonOperator
	: BackSlashLesser
	{
		$$ = ComparisonType.Lesser;
	}
	| BackSlashLesserEqual
	{
		$$ = ComparisonType.LesserEqual;
	}
	| BackSlashGreater
	{
		$$ = ComparisonType.Greater;
	}
	| BackSlashGreaterEqual
	{
		$$ = ComparisonType.GreaterEqual;
	}

AddSubExpr :
	MulDivModExpr
	| AddSubExpr Plus MulDivModExpr
	{
		$$ = new MmlAddExpr ((MmlValueExpr) $1, (MmlValueExpr) $3);
	}
	| AddSubExpr Caret MulDivModExpr
	{
		$$ = new MmlAddExpr ((MmlValueExpr) $1, (MmlValueExpr) $3);
	}
	| AddSubExpr Minus MulDivModExpr
	{
		$$ = new MmlSubtractExpr ((MmlValueExpr) $1, (MmlValueExpr) $3);
	}

MulDivModExpr :
	PrimaryExpr
	| MulDivModExpr Asterisk PrimaryExpr
	{
		$$ = new MmlMultiplyExpr ((MmlValueExpr) $1, (MmlValueExpr) $3);
	}
	| MulDivModExpr Slash PrimaryExpr
	{
		$$ = new MmlDivideExpr ((MmlValueExpr) $1, (MmlValueExpr) $3);
	}
	| MulDivModExpr Percent PrimaryExpr
	{
		$$ = new MmlModuloExpr ((MmlValueExpr) $1, (MmlValueExpr) $3);
	}

PrimaryExpr :
	VariableReference
	| StringConstant
	| OpenCurly Expression CloseCurly
	{
		$$ = new MmlParenthesizedExpr ((MmlValueExpr) $2);
	}
	| StepConstant
	| UnaryExpr

UnaryExpr :
	NumberOrLengthConstant
	| Minus NumberOrLengthConstant
	{
        var expr = (MmlValueExpr) $2;
		$$ = new MmlMultiplyExpr (new MmlConstantExpr (expr.Location, MmlDataType.Number, -1), expr);
	}
	| Caret NumberOrLengthConstant
	{
        var expr = (MmlValueExpr) $2;
		$$ = new MmlAddExpr (new MmlVariableReferenceExpr (expr.Location, "__length"), expr);
	}

VariableReference :
	Dollar CanBeIdentifier
	{
		var i = (MmlToken) $2;
		$$ = new MmlVariableReferenceExpr (i.Location, (string) i.Value);
	}

StringConstant :
	StringLiteral
	{
		var t = (MmlToken) $1;
		$$ = new MmlConstantExpr (t.Location, MmlDataType.String, (string) t.Value);
	}

StepConstant :
	Percent NumberLiteral
	{
		var n = (MmlToken) $2;
		var l = new MmlLength ((int) (double) MmlValueExpr.GetTypedValue (n.Value, MmlDataType.Number, n.Location)) { IsValueByStep = true };
		$$ = new MmlConstantExpr (n.Location, MmlDataType.Length, l);
	}
	| Percent Minus NumberLiteral
	{
		var n = (MmlToken) $3;
		var l = new MmlLength (-1 * (int) (double) MmlValueExpr.GetTypedValue (n.Value, MmlDataType.Number, n.Location)) { IsValueByStep = true };
		$$ = new MmlConstantExpr (n.Location, MmlDataType.Length, l);
	}

NumberOrLengthConstant :
	NumberLiteral
	{
		var t = (MmlToken) $1;
		$$ = new MmlConstantExpr (t.Location, MmlDataType.Number, t.Value);
	}
	| NumberLiteral Dots
	{
		var t = (MmlToken) $1;
		var d = (int) $2;
		$$ = new MmlConstantExpr (t.Location, MmlDataType.Length, new MmlLength ((int) t.Value) { Dots = d });
	}
	| Dots
	{
		var d = (int) $1;
		$$ = new MmlMultiplyExpr (new MmlConstantExpr (input.Location, MmlDataType.Number, MmlValueExpr.LengthDotsToMultiplier (d)), new MmlVariableReferenceExpr (input.Location, "__length"));
	}
	;

Dots :
	Dot
	{
		$$ = 1;
	}
	| Dots Dot
	{
		$$ = ((int) $1) + 1;
	}

CanBeIdentifier :
	Identifier
	| Colon
	| Slash
	;

%%

	}
